#!/usr/bin/env python3
import numpy as jnp
from numba import jit as numb_jit
from collections import namedtuple
from numba import cuda
import math
#from hamiltonian import Hamiltonian

euler_gamma = 0.5772156649015328606065120900824024310421
threadsperblock = 256
@cuda.jit
def test_func(z, x, y, nEQ):
    for i in range(cuda.threadIdx.x, nEQ, cuda.blockDim.x * cuda.blockIdx.x):
        z[i] = x[i] * y[i]

@cuda.jit(device=True)
def evaluate_Ham_align_AD_single(r, phi, pr, pphi, chi_1,chi_2,m_1,m_2,K,d5,dSO,dSS):
    
    L = pphi

    # Extra quantities used in the Hamiltonian
    M = m_1 + m_2
    mu = m_1*m_2/(m_1+m_2)
    nu = mu/M
    Nu = nu
    X1 = m_1/M
    X2 = m_2/M
    Chi1 = chi_1
    Chi2 = chi_2
    psq = L**2/r**2 + pr**2

    # Actual Hamiltonian expressions
    QSprec2 = 0

    QSalign2 = pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3

    Qpm = pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4)

    Q = QSalign2 + QSprec2 + Qpm

    Bnpa = -r*(r + 2)/(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))

    BnpSprec2 = 0

    BnpSalign2 = (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4

    Dbpm = 6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5

    AK0 = -2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5

    Bnp = AK0*Dbpm*(1 - (-2*K*nu + 2)/r) + BnpSalign2 + BnpSprec2 - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2

    BpSprec2 = 0

    Bp = 1/(BpSprec2 + 1)

    AScalib2 = dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6

    ASprec4 = 0

    ASalign4 = 0

    ASprec2 = 0

    ASalign2 = (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5

    AKa = K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6

    A = (AK0 + AKa)*(1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(ASalign2 + ASalign4 + AScalib2 + ASprec2 + ASprec4 + 1)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)

    Heven = math.sqrt(A*(Bnp*pr**2 + Bnpa*L**2*(Chi1*X1 + Chi2*X2)**2/r**2 + Bp*psq + Q + 1))

    GS32 = (Chi1**2*X1**2*(-4.0*X2 - 1.0)/12 + Chi1*Chi2*nu*(0.166666666666667*X2 - 0.583333333333333) + Chi2**2*X2**2*(2.0*X2 - 2.0)/4)/r**2

    GS31 = (-0.5*Chi1**2*X1**2*X2 + Chi1*Chi2*nu*(-2.0*X2 - 5.0)/12 + Chi2**2*X2**2*(4.0*X2 - 5)/12)/r**2

    SOcalib = L*(dSO*(Chi1*X1 + Chi2*X2) + (X1 - X2)*(Chi1*X1 - Chi2*X2)*(7*nu**4/512 + 31*nu**3/512 + nu**2*(208493 - 5136*math.pi**2)/4608 - nu*(-13288125*math.pi**2 + 13762560*euler_gamma + 26542080*math.log(2) + 168816592)/921600 + 1701/512))/r**4

    gSstr = 24*nu*math.log(r)/r**4 + pr**8*(4465125*nu**4 + 5953500*nu**3 + 4975425*nu**2 - 8132450787328*nu*math.log(2) - 90415828800*nu*math.log(3) + 2254036356*nu + 3562775000000*nu*math.log(5) + 3274425)/1209600 - pr**6*(420*nu**3 + 462*nu**2 + 350*nu + 315)/128 + pr**6*(2170395*nu**4 - 1291140*nu**3 - 593325*nu**2 - 62204578560*nu*math.log(3) - 40300000000*nu*math.log(5) + 343473264*nu + 191671894016*nu*math.log(2) + 2399625)/(172800*r) + pr**4*(45*nu**2 + 40*nu + 35)/16 + pr**4*(-972*nu**3 + 702*nu**2 - 106*nu - 1105)/(128*r) + pr**4*(-20655*nu**4 - 834300*nu**3 + 182025*nu**2 - 381263872*nu*math.log(2) + 3596448*nu + 237385728*nu*math.log(3) + 37875)/(3840*r**2) + 3*pr**2*(-6*nu - 5)/8 + 3*pr**2*(19*nu**2 - 12*nu + 23)/(16*r) + 3*pr**2*(36*nu**3 + 1574*nu**2 - 558*nu - 15)/(64*r**2) + pr**2*(5130*nu**4 - 469440*nu**3 - 59040*math.pi**2*nu**2 + 2316030*nu**2 + 196608*nu*math.log(r) - 12317184*nu*math.log(3) - 72435*math.pi**2*nu - 393216*euler_gamma*nu + 5731444*nu + 12025856*nu*math.log(2) - 3240)/(3840*r**3) + 3/2 + 3*(-2*nu - 3)/(8*r) + 3*(-nu**2 - 52*nu - 9)/(16*r**2) + (-36*nu**3 + 4266*nu**2 - 15254*nu + 492*math.pi**2*nu - 1215)/(384*r**3)

    gS = -27*nu*pr**2/8 - 5*nu/(8*r) + 584*nu*math.log(r)/(15*r**4) + pr**8*(7144200*nu**4 + 4465125*nu**3 + 935550*nu**2 - 11506980454400*nu*math.log(2) - 188268367392*nu*math.log(3) + 3476909988*nu + 5082137500000*nu*math.log(5))/1209600 - pr**6*(665*nu**3 + 252*nu**2 - 7*nu)/128 + pr**6*(567720*nu**4 - 2564325*nu**3 - 1148850*nu**2 - 28998570240*nu*math.log(3) - 19300000000*nu*math.log(5) + 175835718*nu + 90521206784*nu*math.log(2))/(57600*r) + pr**4*(35*nu**2 + 5*nu)/8 + pr**4*(-771*nu**3 + 3324*nu**2 + 781*nu)/(128*r) + pr**4*(-38520*nu**4 - 3309615*nu**3 + 2872170*nu**2 - 1626767360*nu*math.log(2) + 19954938*nu + 1008889344*nu*math.log(3))/(11520*r**2) + pr**2*(23*nu**2 - 84*nu)/(8*r) + pr**2*(69*nu**3 + 6228*nu**2 - 5283*nu)/(64*r**2) + pr**2*(14400*nu**4 - 2477700*nu**3 - 326100*math.pi**2*nu**2 + 19813300*nu**2 + 1996800*nu*math.log(r) - 89579520*nu*math.log(3) - 1672575*math.pi**2*nu - 3993600*euler_gamma*nu + 54396338*nu + 83824640*nu*math.log(2))/(19200*r**3) + 2 + (-nu**2 - 102*nu)/(8*r**2) + (-63*nu**3 + 13644*nu**2 - 80399*nu + 1446*math.pi**2*nu)/(1152*r**3)

    Hodd = (L*gS*(Chi1*X1**2 + Chi2*X2**2) + L*gSstr*nu*(Chi1 + Chi2) + L*(Chi1*GS31*X1 + Chi2*GS32*X2) + SOcalib)/(2*Chi1**2*X1**2 + 4*Chi1*Chi2*nu + 2*Chi2**2*X2**2 + 2*r**2 + r*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2 + r**2 - 2*r))

    Heff = Heven + Hodd

    # Evaluate H_real/nu
    H_out = M * math.sqrt(1+2*nu*(Heff-1)) / nu
    return H_out
    
@cuda.jit
def evaluate_Ham_align_AD(H, q,p,chi_1_all,chi_2_all,m_1_all,m_2_all,K,d5,dSO,dSS,nEQ):
    """
    Toy aligned-spin Hamiltonian

    """
    for i in range(cuda.threadIdx.x, nEQ, cuda.blockDim.x * cuda.blockIdx.x):
        r = q[i]
        phi = q[nEQ + i]
        pr = q[i]
        pphi = q[nEQ + i]
        L = pphi

        m_1 = m_1_all[i]
        m_2 = m_2_all[i]
        chi_1 = chi_1_all[i]
        chi_2 = chi_2_all[i]

        H[i] = evaluate_Ham_align_AD_single(r, phi, pr, pphi, chi_1,chi_2,m_1,m_2,K,d5,dSO,dSS)

        #return H

@cuda.jit(device=True)
def evaluate_Jacobian_Ham_align_AD_single(grad_out, r, phi, pr, pphi, chi_1,chi_2,m_1,m_2,K,d5,dSO,dSS, i, nEQ):

    
    L = pphi
    # Extra quantities used in the Jacobian
    M = m_1 + m_2
    mu = m_1*m_2/(m_1+m_2)
    nu = mu/M
    Nu = nu
    X1 = m_1/M
    X2 = m_2/M
    Chi1 = chi_1
    Chi2 = chi_2
    psq = L**2/r**2 + pr**2

    # Evaluate Hamiltonian
    H = evaluate_Ham_align_AD_single(r, phi, pr, pphi, chi_1,chi_2,m_1,m_2,K,d5,dSO,dSS)

    # Heff Jacobian expressions
    dHeffdr = (nu*pphi*(3*Chi1 + 3*Chi2)*(512*nu*pr**2/(15*r**4) - 64*nu*math.log(r)/r**5 + 16*nu/r**5 - pr**6*(2170395*nu**4 - 1291140*nu**3 - 593325*nu**2 - 62204578560*nu*math.log(3) - 40300000000*nu*math.log(5) + 343473264*nu + 191671894016*nu*math.log(2) + 2399625)/(259200*r**2) - pr**4*(-972*nu**3 + 702*nu**2 - 106*nu - 1105)/(192*r**2) - pr**4*(-20655*nu**4 - 834300*nu**3 + 182025*nu**2 - 381263872*nu*math.log(2) + 3596448*nu + 237385728*nu*math.log(3) + 37875)/(2880*r**3) - pr**2*(19*nu**2 - 12*nu + 23)/(8*r**2) - pr**2*(36*nu**3 + 1574*nu**2 - 558*nu - 15)/(16*r**3) - pr**2*(5130*nu**4 - 469440*nu**3 - 59040*math.pi**2*nu**2 + 2316030*nu**2 + 196608*nu*math.log(r) - 12317184*nu*math.log(3) - 72435*math.pi**2*nu - 393216*euler_gamma*nu + 5731444*nu + 12025856*nu*math.log(2) - 3240)/(1920*r**4) - (-2*nu - 3)/(4*r**2) - (-nu**2 - 52*nu - 9)/(4*r**3) - (-36*nu**3 + 4266*nu**2 - 15254*nu + 492*math.pi**2*nu - 1215)/(192*r**4))/2 + 2*pphi*(Chi1*X1**2 + Chi2*X2**2)*(52*nu*pr**2/r**4 + 5*nu/(16*r**2) - 1168*nu*math.log(r)/(15*r**5) + 292*nu/(15*r**5) - pr**6*(567720*nu**4 - 2564325*nu**3 - 1148850*nu**2 - 28998570240*nu*math.log(3) - 19300000000*nu*math.log(5) + 175835718*nu + 90521206784*nu*math.log(2))/(115200*r**2) - pr**4*(-771*nu**3 + 3324*nu**2 + 781*nu)/(256*r**2) - pr**4*(-38520*nu**4 - 3309615*nu**3 + 2872170*nu**2 - 1626767360*nu*math.log(2) + 19954938*nu + 1008889344*nu*math.log(3))/(11520*r**3) - pr**2*(23*nu**2 - 84*nu)/(16*r**2) - pr**2*(69*nu**3 + 6228*nu**2 - 5283*nu)/(64*r**3) - pr**2*(14400*nu**4 - 2477700*nu**3 - 326100*math.pi**2*nu**2 + 19813300*nu**2 + 1996800*nu*math.log(r) - 89579520*nu*math.log(3) - 1672575*math.pi**2*nu - 3993600*euler_gamma*nu + 54396338*nu + 83824640*nu*math.log(2))/(12800*r**4) - (-nu**2 - 102*nu)/(8*r**3) - (-63*nu**3 + 13644*nu**2 - 80399*nu + 1446*math.pi**2*nu)/(768*r**4)) + pphi*(-2*Chi1*X1*(-0.5*Chi1**2*X1**2*X2 + Chi1*Chi2*nu*(-2.0*X2 - 5.0)/12 + Chi2**2*X2**2*(4.0*X2 - 5)/12)/r**3 - 2*Chi2*X2*(Chi1**2*X1**2*(-4.0*X2 - 1.0)/12 + Chi1*Chi2*nu*(0.166666666666667*X2 - 0.583333333333333) + Chi2**2*X2**2*(2.0*X2 - 2.0)/4)/r**3) - 4*pphi*(dSO*(Chi1*X1 + Chi2*X2) + (X1 - X2)*(Chi1*X1 - Chi2*X2)*(7*nu**4/512 + 31*nu**3/512 + nu**2*(208493 - 5136*math.pi**2)/4608 - nu*(-13288125*math.pi**2 + 13762560*euler_gamma + 26542080*math.log(2) + 168816592)/921600 + 1701/512))/r**5)/(2*Chi1**2*X1**2 + 4*Chi1*Chi2*nu + 2*Chi2**2*X2**2 + 2*r**2 + r*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2 + r**2 - 2*r)) - (nu*pphi*(3*Chi1 + 3*Chi2)*(16*nu*math.log(r)/r**4 + pr**8*(4465125*nu**4 + 5953500*nu**3 + 4975425*nu**2 - 8132450787328*nu*math.log(2) - 90415828800*nu*math.log(3) + 2254036356*nu + 3562775000000*nu*math.log(5) + 3274425)/1814400 - pr**6*(420*nu**3 + 462*nu**2 + 350*nu + 315)/192 + pr**6*(2170395*nu**4 - 1291140*nu**3 - 593325*nu**2 - 62204578560*nu*math.log(3) - 40300000000*nu*math.log(5) + 343473264*nu + 191671894016*nu*math.log(2) + 2399625)/(259200*r) + pr**4*(45*nu**2 + 40*nu + 35)/24 + pr**4*(-972*nu**3 + 702*nu**2 - 106*nu - 1105)/(192*r) + pr**4*(-20655*nu**4 - 834300*nu**3 + 182025*nu**2 - 381263872*nu*math.log(2) + 3596448*nu + 237385728*nu*math.log(3) + 37875)/(5760*r**2) + pr**2*(-6*nu - 5)/4 + pr**2*(19*nu**2 - 12*nu + 23)/(8*r) + pr**2*(36*nu**3 + 1574*nu**2 - 558*nu - 15)/(32*r**2) + pr**2*(5130*nu**4 - 469440*nu**3 - 59040*math.pi**2*nu**2 + 2316030*nu**2 + 196608*nu*math.log(r) - 12317184*nu*math.log(3) - 72435*math.pi**2*nu - 393216*euler_gamma*nu + 5731444*nu + 12025856*nu*math.log(2) - 3240)/(5760*r**3) + 1 + (-2*nu - 3)/(4*r) + (-nu**2 - 52*nu - 9)/(8*r**2) + (-36*nu**3 + 4266*nu**2 - 15254*nu + 492*math.pi**2*nu - 1215)/(576*r**3))/2 + 2*pphi*(Chi1*X1**2 + Chi2*X2**2)*(-27*nu*pr**2/16 - 5*nu/(16*r) + 292*nu*math.log(r)/(15*r**4) + pr**8*(7144200*nu**4 + 4465125*nu**3 + 935550*nu**2 - 11506980454400*nu*math.log(2) - 188268367392*nu*math.log(3) + 3476909988*nu + 5082137500000*nu*math.log(5))/2419200 - pr**6*(665*nu**3 + 252*nu**2 - 7*nu)/256 + pr**6*(567720*nu**4 - 2564325*nu**3 - 1148850*nu**2 - 28998570240*nu*math.log(3) - 19300000000*nu*math.log(5) + 175835718*nu + 90521206784*nu*math.log(2))/(115200*r) + pr**4*(35*nu**2 + 5*nu)/16 + pr**4*(-771*nu**3 + 3324*nu**2 + 781*nu)/(256*r) + pr**4*(-38520*nu**4 - 3309615*nu**3 + 2872170*nu**2 - 1626767360*nu*math.log(2) + 19954938*nu + 1008889344*nu*math.log(3))/(23040*r**2) + pr**2*(23*nu**2 - 84*nu)/(16*r) + pr**2*(69*nu**3 + 6228*nu**2 - 5283*nu)/(128*r**2) + pr**2*(14400*nu**4 - 2477700*nu**3 - 326100*math.pi**2*nu**2 + 19813300*nu**2 + 1996800*nu*math.log(r) - 89579520*nu*math.log(3) - 1672575*math.pi**2*nu - 3993600*euler_gamma*nu + 54396338*nu + 83824640*nu*math.log(2))/(38400*r**3) + 1 + (-nu**2 - 102*nu)/(16*r**2) + (-63*nu**3 + 13644*nu**2 - 80399*nu + 1446*math.pi**2*nu)/(2304*r**3)) + pphi*(Chi1*X1*(-0.5*Chi1**2*X1**2*X2 + Chi1*Chi2*nu*(-2.0*X2 - 5.0)/12 + Chi2**2*X2**2*(4.0*X2 - 5)/12)/r**2 + Chi2*X2*(Chi1**2*X1**2*(-4.0*X2 - 1.0)/12 + Chi1*Chi2*nu*(0.166666666666667*X2 - 0.583333333333333) + Chi2**2*X2**2*(2.0*X2 - 2.0)/4)/r**2) + pphi*(dSO*(Chi1*X1 + Chi2*X2) + (X1 - X2)*(Chi1*X1 - Chi2*X2)*(7*nu**4/512 + 31*nu**3/512 + nu**2*(208493 - 5136*math.pi**2)/4608 - nu*(-13288125*math.pi**2 + 13762560*euler_gamma + 26542080*math.log(2) + 168816592)/921600 + 1701/512))/r**4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2 + r**2 + r*(2*r - 2) + 2*r)/(2*Chi1**2*X1**2 + 4*Chi1*Chi2*nu + 2*Chi2**2*X2**2 + 2*r**2 + r*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2 + r**2 - 2*r))**2 + (((-2*K*nu + 2)/r**2 - 2*(-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**3)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2) + (1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(-6*dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**7 - (2*Chi1**2*X1**2*(5.0*X2 + nu) + 4*Chi1*Chi2*nu*(2 - nu) + 2*Chi2**2*X2**2*(-5.0*X2 + nu + 5.0))/r**5 - (5*Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + 5*Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + 5*Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**6)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2) + (1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(2*K*nu/r**2 - 2*K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**3 - 8*K*nu*(K*nu - 1)/r**3 - 6*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**4 - 6*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**4 - 4*nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**5 - 64*nu/(5*r**6) - 8*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(35*r**7) + 4*nu*(nu*(672*K + 756) + 1079)/(105*r**7) - 89024*math.pi*nu/(525*r**(15/2)) - (4*K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 16*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**5 - (-10*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 10*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**6 - (-160*K**5*nu**5 + 640*K**4*nu**4 + 5*K**2*nu**3*(8 - 192*K) + 5*nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + 5*nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r))/r**6 - (-6*K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/16)/r**7)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2) + (1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2*(4*r**3 + r*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2) + (r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))**2) - pphi**2*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r**2*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) - 2*pphi**2/r**3 + pr**8*(-nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r**2) - 5994461*math.pi*nu/(5080320*r**(7/2)) - (-12*nu**4 + 48*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/529200 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/2116800)/r**3) + pr**6*(2723471*math.pi*nu/(216000*r**(9/2)) - (12*nu**3 - 54*nu**2/5 + 2*nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**3 - (-42*nu**4 + 348*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/1050 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/3150)/r**4) + pr**4*(-88703*math.pi*nu/(420*r**(11/2)) - (-12*nu**2 + 16*nu)/r**3 + (592*nu**2/(5*r) - 5428*nu/(105*r))/r**4 - (30*nu**3 - 249*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/15)/r**4 - (4*nu**3*(640 - 615*math.pi**2/32) + 4*nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + 4*nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**5) - 3*pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**4 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(2*K*nu/r**2 - 8*K*nu*(K*nu - 1)/r**3 - 6*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**4 - 4*nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**5 - 64*nu/(5*r**6) - 8*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(35*r**7) + 4*nu*(nu*(672*K + 756) + 1079)/(105*r**7) - 89024*math.pi*nu/(525*r**(15/2)) - (-160*K**5*nu**5 + 640*K**4*nu**4 + 5*K**2*nu**3*(8 - 192*K) + 5*nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + 5*nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r))/r**6) + (1 - (-2*K*nu + 2)/r)*(-12*nu/r**3 - 592*nu/(15*r**5) - 1457126*math.pi*nu/(1575*r**(13/2)) - (-18*nu**2 + 156*nu)/r**4 + (3392*nu**2/(15*r) + 1420*nu/(7*r))/r**5 - (4*nu**2*(-260 + 123*math.pi**2/16) + 4*nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**5 - (5*d5 + 3392*nu**2*math.log(r)/3 + 7100*nu*math.log(r)/7)/r**6)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) + (-2*K*nu + 2)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5)/r**2 + (-2*Chi1**2*X1**2 - 4*Chi1*Chi2*nu - 2*Chi2**2*X2**2)/r**3 - (9*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + 3*Chi1*Chi2*nu*(9*nu/2 + 6) + 9*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**4 - (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu) + 4*Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0))/r**5))*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2) - (-(2 + 4/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**3 + (-2*Chi1**2*X1**2 - 4*Chi1*Chi2*nu - 2*Chi2**2*X2**2)/r**4)*(1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)**2)/(2*math.sqrt((1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)))

    dHeffdphi = 0

    dHeffdpr = (nu*pphi*(3*Chi1 + 3*Chi2)*(pr**7*(4465125*nu**4 + 5953500*nu**3 + 4975425*nu**2 - 8132450787328*nu*math.log(2) - 90415828800*nu*math.log(3) + 2254036356*nu + 3562775000000*nu*math.log(5) + 3274425)/226800 - pr**5*(420*nu**3 + 462*nu**2 + 350*nu + 315)/32 + pr**5*(2170395*nu**4 - 1291140*nu**3 - 593325*nu**2 - 62204578560*nu*math.log(3) - 40300000000*nu*math.log(5) + 343473264*nu + 191671894016*nu*math.log(2) + 2399625)/(43200*r) + pr**3*(45*nu**2 + 40*nu + 35)/6 + pr**3*(-972*nu**3 + 702*nu**2 - 106*nu - 1105)/(48*r) + pr**3*(-20655*nu**4 - 834300*nu**3 + 182025*nu**2 - 381263872*nu*math.log(2) + 3596448*nu + 237385728*nu*math.log(3) + 37875)/(1440*r**2) + pr*(-6*nu - 5)/2 + pr*(19*nu**2 - 12*nu + 23)/(4*r) + pr*(36*nu**3 + 1574*nu**2 - 558*nu - 15)/(16*r**2) + pr*(5130*nu**4 - 469440*nu**3 - 59040*math.pi**2*nu**2 + 2316030*nu**2 + 196608*nu*math.log(r) - 12317184*nu*math.log(3) - 72435*math.pi**2*nu - 393216*euler_gamma*nu + 5731444*nu + 12025856*nu*math.log(2) - 3240)/(2880*r**3))/2 + 2*pphi*(Chi1*X1**2 + Chi2*X2**2)*(-27*nu*pr/8 + pr**7*(7144200*nu**4 + 4465125*nu**3 + 935550*nu**2 - 11506980454400*nu*math.log(2) - 188268367392*nu*math.log(3) + 3476909988*nu + 5082137500000*nu*math.log(5))/302400 - pr**5*(1995*nu**3 + 756*nu**2 - 21*nu)/128 + pr**5*(567720*nu**4 - 2564325*nu**3 - 1148850*nu**2 - 28998570240*nu*math.log(3) - 19300000000*nu*math.log(5) + 175835718*nu + 90521206784*nu*math.log(2))/(19200*r) + pr**3*(35*nu**2 + 5*nu)/4 + pr**3*(-771*nu**3 + 3324*nu**2 + 781*nu)/(64*r) + pr**3*(-38520*nu**4 - 3309615*nu**3 + 2872170*nu**2 - 1626767360*nu*math.log(2) + 19954938*nu + 1008889344*nu*math.log(3))/(5760*r**2) + pr*(23*nu**2 - 84*nu)/(8*r) + pr*(69*nu**3 + 6228*nu**2 - 5283*nu)/(64*r**2) + pr*(14400*nu**4 - 2477700*nu**3 - 326100*math.pi**2*nu**2 + 19813300*nu**2 + 1996800*nu*math.log(r) - 89579520*nu*math.log(3) - 1672575*math.pi**2*nu - 3993600*euler_gamma*nu + 54396338*nu + 83824640*nu*math.log(2))/(19200*r**3)))/(2*Chi1**2*X1**2 + 4*Chi1*Chi2*nu + 2*Chi2**2*X2**2 + 2*r**2 + r*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2 + r**2 - 2*r)) + (1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(8*pr**7*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + 6*pr**5*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + 4*pr**3*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + 4*pr**3*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + 2*pr*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + 2*pr)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(math.sqrt((1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2))*(2 + 2*(1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2))

    dHeffdpphi = (Chi1*X1*(-0.5*Chi1**2*X1**2*X2 + Chi1*Chi2*nu*(-2.0*X2 - 5.0)/12 + Chi2**2*X2**2*(4.0*X2 - 5)/12)/r**2 + Chi2*X2*(Chi1**2*X1**2*(-4.0*X2 - 1.0)/12 + Chi1*Chi2*nu*(0.166666666666667*X2 - 0.583333333333333) + Chi2**2*X2**2*(2.0*X2 - 2.0)/4)/r**2 + nu*(3*Chi1 + 3*Chi2)*(16*nu*math.log(r)/r**4 + pr**8*(4465125*nu**4 + 5953500*nu**3 + 4975425*nu**2 - 8132450787328*nu*math.log(2) - 90415828800*nu*math.log(3) + 2254036356*nu + 3562775000000*nu*math.log(5) + 3274425)/1814400 - pr**6*(420*nu**3 + 462*nu**2 + 350*nu + 315)/192 + pr**6*(2170395*nu**4 - 1291140*nu**3 - 593325*nu**2 - 62204578560*nu*math.log(3) - 40300000000*nu*math.log(5) + 343473264*nu + 191671894016*nu*math.log(2) + 2399625)/(259200*r) + pr**4*(45*nu**2 + 40*nu + 35)/24 + pr**4*(-972*nu**3 + 702*nu**2 - 106*nu - 1105)/(192*r) + pr**4*(-20655*nu**4 - 834300*nu**3 + 182025*nu**2 - 381263872*nu*math.log(2) + 3596448*nu + 237385728*nu*math.log(3) + 37875)/(5760*r**2) + pr**2*(-6*nu - 5)/4 + pr**2*(19*nu**2 - 12*nu + 23)/(8*r) + pr**2*(36*nu**3 + 1574*nu**2 - 558*nu - 15)/(32*r**2) + pr**2*(5130*nu**4 - 469440*nu**3 - 59040*math.pi**2*nu**2 + 2316030*nu**2 + 196608*nu*math.log(r) - 12317184*nu*math.log(3) - 72435*math.pi**2*nu - 393216*euler_gamma*nu + 5731444*nu + 12025856*nu*math.log(2) - 3240)/(5760*r**3) + 1 + (-2*nu - 3)/(4*r) + (-nu**2 - 52*nu - 9)/(8*r**2) + (-36*nu**3 + 4266*nu**2 - 15254*nu + 492*math.pi**2*nu - 1215)/(576*r**3))/2 + (2*Chi1*X1**2 + 2*Chi2*X2**2)*(-27*nu*pr**2/16 - 5*nu/(16*r) + 292*nu*math.log(r)/(15*r**4) + pr**8*(7144200*nu**4 + 4465125*nu**3 + 935550*nu**2 - 11506980454400*nu*math.log(2) - 188268367392*nu*math.log(3) + 3476909988*nu + 5082137500000*nu*math.log(5))/2419200 - pr**6*(665*nu**3 + 252*nu**2 - 7*nu)/256 + pr**6*(567720*nu**4 - 2564325*nu**3 - 1148850*nu**2 - 28998570240*nu*math.log(3) - 19300000000*nu*math.log(5) + 175835718*nu + 90521206784*nu*math.log(2))/(115200*r) + pr**4*(35*nu**2 + 5*nu)/16 + pr**4*(-771*nu**3 + 3324*nu**2 + 781*nu)/(256*r) + pr**4*(-38520*nu**4 - 3309615*nu**3 + 2872170*nu**2 - 1626767360*nu*math.log(2) + 19954938*nu + 1008889344*nu*math.log(3))/(23040*r**2) + pr**2*(23*nu**2 - 84*nu)/(16*r) + pr**2*(69*nu**3 + 6228*nu**2 - 5283*nu)/(128*r**2) + pr**2*(14400*nu**4 - 2477700*nu**3 - 326100*math.pi**2*nu**2 + 19813300*nu**2 + 1996800*nu*math.log(r) - 89579520*nu*math.log(3) - 1672575*math.pi**2*nu - 3993600*euler_gamma*nu + 54396338*nu + 83824640*nu*math.log(2))/(38400*r**3) + 1 + (-nu**2 - 102*nu)/(16*r**2) + (-63*nu**3 + 13644*nu**2 - 80399*nu + 1446*math.pi**2*nu)/(2304*r**3)) + (dSO*(Chi1*X1 + Chi2*X2) + (X1 - X2)*(Chi1*X1 - Chi2*X2)*(7*nu**4/512 + 31*nu**3/512 + nu**2*(208493 - 5136*math.pi**2)/4608 - nu*(-13288125*math.pi**2 + 13762560*euler_gamma + 26542080*math.log(2) + 168816592)/921600 + 1701/512))/r**4)/(2*Chi1**2*X1**2 + 4*Chi1*Chi2*nu + 2*Chi2**2*X2**2 + 2*r**2 + r*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2 + r**2 - 2*r)) + (-2*pphi*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + 2*pphi/r**2)*(1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(math.sqrt((1 - (-2*K*nu + 2)/r + (-K*nu + 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2)*(dSS*(Chi1**2*X1**2 + Chi1*Chi2*(1 - 2*nu) + Chi2**2*X2**2)/r**6 + 1 + (Chi1**2*X1**2*(5.0*X2 + nu)/2 + Chi1*Chi2*nu*(2 - nu) + Chi2**2*X2**2*(-5.0*X2 + nu + 5.0)/2)/r**4 + (Chi1**2*X1**2*(-X2*(294*nu + 85) + 428.0*X2 - 21*nu**2 + 987.0*nu)/56 + Chi1*Chi2*nu*(6*nu**2 + 145*nu + 68)/8 + Chi2**2*X2**2*(X2*(294*nu + 85) - 428.0*X2 - 21*nu**2 + 693.0*nu + 343.0)/56)/r**5)*(-pphi**2*(r + 2)*(Chi1*X1 + Chi2*X2)**2/(r*(r**4 + r*(r + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))) + pphi**2/r**2 + pr**8*(nu*(-693359375*math.log(5) - 643896 + 59326749*math.log(3) + 1516829440*math.log(2))/(3150*r) + 5994461*math.pi*nu/(12700800*r**(5/2)) + (-6*nu**4 + 24*nu**3/7 + nu**2*(-11712255859375*math.log(5) - 3391115364245*math.log(7) + 1755887616 + 8965819883403*math.log(3) + 22502063927296*math.log(2))/1058400 + nu*(-43480265170944*math.log(2) - 10632236726043*math.log(3) + 10005778368 + 3391115364245*math.log(7) + 21877274609375*math.log(5))/4233600)/r**2) + pr**6*(-2723471*math.pi*nu/(756000*r**(7/2)) + (6*nu**3 - 27*nu**2/5 + nu*(-2358912*math.log(2)/25 - 827/3 + 1399437*math.log(3)/50 + 390625*math.log(5)/18))/r**2 + (-14*nu**4 + 116*nu**3 + nu**2*(-9996617728*math.log(2) - 408682503*math.log(3) + 6681738 + 4580078125*math.log(5))/3150 + nu*(-5084375000*math.log(5) - 1249161912*math.log(3) + 23517747 + 13751491072*math.log(2))/9450)/r**3) + pr**4*(88703*math.pi*nu/(1890*r**(9/2)) + (-6*nu**2 + 8*nu)/r**2 + (10*nu**3 - 83*nu**2 + 4*nu*(-74358*math.log(3) - 3981 + 124064*math.log(2))/45)/r**3 + (nu**3*(640 - 615*math.pi**2/32) + nu**2*(592*math.log(r)/5 - 9765625*math.log(5)/126 - 6396489*math.log(3)/70 - 1184*euler_gamma/5 + 31633*math.pi**2/512 + 150683/105 + 33693536*math.log(2)/105) + nu*(-5428*math.log(r)/105 - 40979464*math.log(2)/315 - 93031*math.pi**2/1536 + 10856*euler_gamma/105 + 1295219/350 + 9765625*math.log(5)/504 + 14203593*math.log(3)/280))/r**4) + pr**4*(-5*Chi1**2*X1**2*(X2*(18*nu - 1) + nu*(11.0*nu - 21.0))/8 - 5*Chi1*Chi2*nu*(10*nu**2 - 9*nu - 4)/8 - 5*Chi2**2*X2**2*(-18*X2*nu + X2 + 11.0*nu**2 - 3.0*nu - 1)/8)/r**3 + pr**2*((1 - (-2*K*nu + 2)/r)*(6*nu/r**2 + 264932*math.pi*nu/(1575*r**(11/2)) + 1 + (-6*nu**2 + 52*nu)/r**3 + (nu**2*(-260 + 123*math.pi**2/16) + nu*(-592*math.log(r)/15 - 6496*math.log(2)/15 - 23761*math.pi**2/1536 - 533/45 + 1184*euler_gamma/15 + 2916*math.log(3)/5))/r**4 + (d5 + 3392*nu**2*math.log(r)/15 + 1420*nu*math.log(r)/7)/r**5)*(-2*K*nu/r + 4*K*nu*(K*nu - 1)/r**2 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5) - 1 + (Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + (3*Chi1**2*X1**2*(7*X2 + 5.0*nu)/4 + Chi1*Chi2*nu*(9*nu/2 + 6) + 3*Chi2**2*X2**2*(-7*X2 + 5.0*nu + 7.0)/4)/r**3 + (Chi1**2*X1**2*(1.0*X2*(38 - 48*nu) - X2*(80*nu + 49) - 20*nu**2 + 214.0*nu)/4 + Chi1*Chi2*nu*(10*nu**2 + 29*nu + 8) + Chi2**2*X2**2*(1.0*X2*(48*nu - 38) + X2*(80*nu + 49) - 20*nu**2 + 86.0*nu - 11.0)/4)/r**4) + pr**2 + 1)*(-2*K*nu/r + K*nu*(-K*nu + 2)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2 + 4*K*nu*(K*nu - 1)/r**2 + 2*K*nu*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(2*K**2*nu**2 - 5*K*nu + 3)/r**3 + 2*nu*(-4*K**3*nu**2 + 8*K**2*nu - 4*K + 1)/r**3 + nu*(16*K**4*nu**3 - 48*K**3*nu**2 + 48*K**2*nu - 4*K*(nu + 4) - 41*math.pi**2/32 + 106/3)/r**4 + 4*nu*(nu*(672*K + 756) + 1079)*math.log(r)/(105*r**6) + 13696*math.pi*nu/(525*r**(13/2)) + 1 + (K*nu*(K*nu - 2)*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 - 4*K*nu*(K*nu - 1)**2*(3*K*nu - 4)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2))/r**4 + (-2*K*nu*(K*nu - 1)**3*(3*K*nu - 5)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**2 + 2*nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(16*K**3*nu**2 - 36*K**2*nu + 20*K - 1))/r**5 + (-32*K**5*nu**5 + 128*K**4*nu**4 + K**2*nu**3*(8 - 192*K) + nu**2*(12288*K**2 - 7552*K + 246*math.pi**2*K - 3536 + 123*math.pi**2)/96 + nu*(-32*K + 1/20 + 128*euler_gamma/5 + 963*math.pi**2/512 + 256*math.log(2)/5) - 64*nu*math.log(r)/5)/r**5 + (-K*nu*(K*nu - 2)*(K*nu - 1)**4*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)**3 - nu*(K*nu - 1)**2*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)*(7680*K**4*nu**3 - 24576*K**3*nu**2 + 26112*K**2*nu - 768*K*(nu + 12) - 123*math.pi**2 + 3776)/96)/r**6)/(1 + (1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2))*(2 + 2*(1 + 2/r)*(Chi1**2*X1**2 + 2*Chi1*Chi2*nu + Chi2**2*X2**2)/r**2))

    # Compute H Jacobian
    dHdr = M * M * dHeffdr / (nu*H)
    dHdphi = M * M * dHeffdphi / (nu*H)
    dHdpr = M * M * dHeffdpr / (nu*H)
    dHdpphi = M * M * dHeffdpphi / (nu*H)

    tid = cuda.threadIdx.x 
    grad_out[0 * nEQ + i] = dHdr
    grad_out[1 * nEQ + i] = dHdphi
    grad_out[2 * nEQ + i] = dHdpr
    grad_out[3 * nEQ + i] = dHdpphi

    #return math.array([dHdr, dHdphi, dHdpr, dHdpphi])


@cuda.jit
def evaluate_Jacobian_Ham_align_AD(grad_out, q,p,chi_1_all,chi_2_all,m_1_all,m_2_all,K,d5,dSO,dSS,nEQ):
    """
    Toy aligned-spin Hamiltonian

    """

    #grad_out = cuda.shared.array(threadsperblock * 4, "f8")

    # Coordinate definitions
    for i in range(cuda.threadIdx.x, nEQ, cuda.blockDim.x * cuda.blockIdx.x):
        r = q[i]
        phi = q[nEQ + i]
        pr = q[i]
        pphi = q[nEQ + i]
        L = pphi

        m_1 = m_1_all[i]
        m_2 = m_2_all[i]
        chi_1 = chi_1_all[i]
        chi_2 = chi_2_all[i]

        evaluate_Jacobian_Ham_align_AD_single(grad_out, r, phi, pr, pphi, chi_1,chi_2,m_1,m_2,K,d5,dSO,dSS, i, nEQ)



class Ham_align_AD:  # (Hamiltonian):
    def __init__(self,**kwargs):
        try:
            self.calibration_coeffs = math.fromiter(kwargs['calibration_coeffs'].values(), dtype=float)
        except KeyError:
            self.calibration_coeffs = None
            pass

        self.derivative()

    def __call__(self,q,p,chi_1,chi_2,m_1,m_2,**kwargs):
        return evaluate_Ham_align_AD(q,p,chi_1,chi_2,m_1,m_2,calib_coeffs=self.calibration_coeffs)

    def derivative(self):
        pass

    def grad(self, q, p, chi_1, chi_2, m_1, m_2):
        return evaluate_Jacobian_Ham_align_AD(q,p,chi_1,chi_2,m_1,m_2,calib_coeffs=self.calibration_coeffs)

    def hessian(self, q,p, chi_1, chi_2, m_1, m_2):
        return evaluate_Hessian_Ham_align_AD(q,p,chi_1,chi_2,m_1,m_2,calib_coeffs=self.calibration_coeffs).reshape(4, 4)

if __name__ == "__main__":

    import cupy as cp

    nEQ = 100000

    r = cp.full(nEQ, 18.734279345310867)
    phi = cp.zeros_like(r)
    pphi = cp.full(nEQ, 4.715590086960559)
    pr = cp.full(nEQ, -0.0005001510831332404)
    H = cp.zeros_like(r)

    q = cp.concatenate([r, phi])
    p = cp.concatenate([pr, pphi])

    mr = 2.5
    chi_1  = cp.full_like(r, 0.0001)
    chi_2  = cp.full_like(r, 0.0001)
    m_1 = cp.full_like(r, mr/(1+mr))
    m_2 = cp.full_like(r, 1/(1+mr))
    K = 0.0 
    d5 = 0.0
    dS0 = 0.0
    dSS = 0.0


    grad_out = cp.zeros(nEQ * 4)
    blockspergrid = (nEQ + (threadsperblock - 1)) // threadsperblock
    evaluate_Ham_align_AD[blockspergrid, threadsperblock](H, q,p,chi_1,chi_2,m_1,m_2,K,d5,dS0,dSS,nEQ)
    evaluate_Jacobian_Ham_align_AD[blockspergrid, threadsperblock](grad_out, q,p,chi_1,chi_2,m_1,m_2,K,d5,dS0,dSS,nEQ)
    breakpoint()