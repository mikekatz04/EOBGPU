import numpy as np

def pow(x, a):
    return x ** a

def ODE_1(x, arg, k, additionalArgs):
    m_1 = additionalArgs[0]
    m_2 = additionalArgs[1]
    chi_1 = additionalArgs[2]
    chi_2 = additionalArgs[3]

    r = arg[0]
    phi = arg[1]
    pr = arg[2]
    L = arg[3]

    # Forcing part
    M = m_1 + m_2
    mu = m_1*m_2/(m_1+m_2)
    nu = mu/M
    X1 = m_1/M
    X2 = m_2/M
    S1 = pow(m_1/M,2)*chi_1
    S2 = pow(m_2/M,2)*chi_2
    Delta = (m_1-m_2)/(m_1+m_2)

    Chi1 = chi_1
    Chi2 = chi_2
    Nu = nu
    Fr = 4.*L*pow(Nu, 2)*S1*pr*(-9.*Delta + 32.*Nu + 9.)/(15.*pow(r, 6)) + 4.*L*pow(Nu, 2)*S2*pr*(9.*Delta + 32.*Nu + 9.)/(15.*pow(r, 6)) - 128*np.pi*L*pow(Nu, 2)*pr/(5*pow(r, 6)) - 188*pow(Nu, 3)*S1*S2*pr/(5*pow(r, 6)) + pow(Nu, 2)*pow(S1, 2)*pr*(Delta + 2*Nu - 1)/(5*pow(r, 6)) - pow(Nu, 2)*pow(S2, 2)*pr*(Delta - 2*Nu + 1)/(5*pow(r, 6)) - 32*pow(Nu, 2)*pr/(5*pow(r, 4)) + 2*pow(Nu, 2)*pr*(588*Nu + 1751)/(105*pow(r, 5)) - pow(Nu, 2)*pr*(9072*pow(Nu, 2) + 228213*Nu - 8827)/(2835*pow(r, 6))
    Fphi = -188*L*pow(Nu, 3)*S1*S2/(5*pow(r, 6)) + L*pow(Nu, 2)*pow(S1, 2)*(Delta + 2*Nu - 1)/(5*pow(r, 6)) - L*pow(Nu, 2)*pow(S2, 2)*(Delta - 2*Nu + 1)/(5*pow(r, 6)) - 32*L*pow(Nu, 2)/(5*pow(r, 4)) + 2*L*pow(Nu, 2)*(588*Nu + 1751)/(105*pow(r, 5)) - L*pow(Nu, 2)*(9072*pow(Nu, 2) + 228213*Nu - 8827)/(2835*pow(r, 6)) + 4*pow(Nu, 2)*S1*(-9*Delta + 32*Nu + 9)/(15*pow(r, 5)) + 4*pow(Nu, 2)*S2*(9*Delta + 32*Nu + 9)/(15*pow(r, 5)) - 128*np.pi*pow(Nu, 2)/(5*pow(r, 5))

    Fphi =  Fphi / nu
    Fr = Fr / nu

    Nu2 = pow(Nu,2)
    Chi1_2 = pow(Chi1,2)
    Chi2_2 = pow(Chi2,2)
    X1_2 = pow(X1,2)
    X2_2 = pow(X2,2)
    r2 = pow(r,2)
    r3 = pow(r,3)
    r4 = pow(r,4)
    r5 = pow(r,5)
    r6 = pow(r,6)
    r11 = pow(r,11)
    pr2 = pow(pr,2)
    pr4 = pow(pr,4)
    Chi1X1pChi2X2_2 = pow(((Chi1 * X1) + (Chi2 * X2)),2)
    Nu3 = pow(Nu,3)
    L2 = pow(L,2)
    r2m1 = pow(r,(2-1))
    r3m1 = pow(r,(3-1))
    r4m1 = pow(r,(4-1))
    r5m1 = pow(r,(5-1))

    pr2m1 = pow(pr,(2-1))
    pr4m1 = pow(pr,(4-1))
    log1overr = np.log((1.0 / r))

    block_sub_2 = (((( -((r2))) + (2.0 * r)) - (Chi1X1pChi2X2_2)) * ((((0.75 * (r6)) * ((((Chi1_2) * ((((((Nu2) + ((8.0 * Nu) * X2)) - (4.0 * Nu)) + (4.0 * X2)) + (((4.0 * Nu) - 4.0) * ((Nu + X2) - 1.0))) - 4.0)) - ((((2.0 * Chi1) * Chi2) * Nu) * ((3.0 * Nu) + 4.0))) + ((Chi2_2) * ((5.0 * (Nu2)) - ((12.0 * Nu) * X2))))) - ((0.25 * (r5)) * ((((Chi1_2) * (((((20.0 * (Nu3)) - (368.0 * (Nu2))) + (251.0 * Nu)) + ((1.0 * X2) * (((48.0 * (Nu2)) - (197.0 * Nu)) + 46.0))) + ((2.0 * X2) * (((50.0 * (Nu2)) - (27.0 * Nu)) - 23.0)))) + ((((8.0 * Chi1) * Chi2) * Nu) * (((5.0 * (Nu2)) + (13.0 * Nu)) + 10.0))) + ((Chi2_2) * ((Nu * ((20.0 * (Nu2)) - (220.0 * Nu))) + (X2 * ((( -(148.0)) * (Nu2)) + (251.0 * Nu)))))))) - (((Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626)) + (r5)) * ((((((( -(184.12741616662555)) * (Nu2)) + ((6.0 * Nu) * (r2))) + (((2.0 * Nu) * r) * (26.0 - (3.0 * Nu)))) + ((39.466666666666669 * Nu) * (log1overr))) + (221.57199119214835 * Nu)) + (r4)))))

    block_sub_1 = pow((1 + ((2 * Nu) * (((((0.020833333333333332 * L) * (((((((( -(4.0)) * Chi1) * X1) * X2) * ((((Chi1_2) * ((((( -(6.0)) * (Nu2)) + (6.0 * Nu)) - ((12.0 * X2) * (Nu - 1.0))) + ((3.0 * X2) * ((2.0 * Nu) - 4.0)))) + (((Chi1 * Chi2) * Nu) * (((2.0 * Nu) - (5.0 * X2)) + 5.0))) + (((Chi2_2) * Nu) * ((4.0 * Nu) + (1.0 * X2))))) - ((((4.0 * Chi2) * X1) * X2) * (((((Chi1_2) * Nu) * (((4.0 * Nu) - (1.0 * X2)) + 1.0)) - (((Chi1 * Chi2) * Nu) * ((( -(2.0)) * Nu) - (5.0 * X2)))) - ((Chi2_2) * ((6.0 * (Nu2)) - ((6.0 * Nu) * X2)))))) + (((6.0 * Nu) * ((Chi1 * (X1_2)) + (Chi2 * (X2_2)))) * ((((Nu * r) * (((pr2) * ((23.0 * Nu) - 84.0)) - 5.0)) - (Nu * (Nu + 102.0))) + ((r2) * (((((5.0 * Nu) * (pr4)) * ((7.0 * Nu) + 1.0)) - ((27.0 * Nu) * (pr2))) + 16.0))))) + ((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * (((((( -(3.0)) * (Nu2)) - (156.0 * Nu)) + ((r2) * ((((5.0 * (pr4)) * (((9.0 * (Nu2)) + (8.0 * Nu)) + 7.0)) - ((6.0 * (pr2)) * ((6.0 * Nu) + 5.0))) + 24.0))) + ((3.0 * r) * (((( -(4.0)) * Nu) + ((pr2) * (((19.0 * (Nu2)) - (12.0 * Nu)) + 23.0))) - 6.0))) - 27.0)))) / (((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) + (np.sqrt(((((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * ((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0))))) - 1))),(0.5-1))

    H1 = (Nu * (M * ((block_sub_1 * (0.5 * ((((2 * Nu) * (((((((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((0.020833333333333332 * L) * ((((((((6.0 * Nu) * ((Chi1 * (X1_2)) + (Chi2 * (X2_2)))) * (((((((((pr2) * ((23.0 * Nu) - 84.0)) - 5.0) * ((Nu * (1))))))) + (((((((5.0 * Nu) * (pr4)) * ((7.0 * Nu) + 1.0)) - ((27.0 * Nu) * (pr2))) + 16.0) * ((r2m1 * (2 * 1))))))))))) + (((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * ((((((((((((5.0 * (pr4)) * (((9.0 * (Nu2)) + (8.0 * Nu)) + 7.0)) - ((6.0 * (pr2)) * ((6.0 * Nu) + 5.0))) + 24.0) * ((r2m1 * (2 * 1))))))) + (((((( -(4.0)) * Nu) + ((pr2) * (((19.0 * (Nu2)) - (12.0 * Nu)) + 23.0))) - 6.0) * ((3.0 * (1))) + (3.0 * r) * (((((((pr2) * ((((((10))))))))))))))))))))))) - ((0.020833333333333332 * L) * (((((((( -(4.0)) * Chi1) * X1) * X2) * ((((Chi1_2) * ((((( -(6.0)) * (Nu2)) + (6.0 * Nu)) - ((12.0 * X2) * (Nu - 1.0))) + ((3.0 * X2) * ((2.0 * Nu) - 4.0)))) + (((Chi1 * Chi2) * Nu) * (((2.0 * Nu) - (5.0 * X2)) + 5.0))) + (((Chi2_2) * Nu) * ((4.0 * Nu) + (1.0 * X2))))) - ((((4.0 * Chi2) * X1) * X2) * (((((Chi1_2) * Nu) * (((4.0 * Nu) - (1.0 * X2)) + 1.0)) - (((Chi1 * Chi2) * Nu) * ((( -(2.0)) * Nu) - (5.0 * X2)))) - ((Chi2_2) * ((6.0 * (Nu2)) - ((6.0 * Nu) * X2)))))) + (((6.0 * Nu) * ((Chi1 * (X1_2)) + (Chi2 * (X2_2)))) * ((((Nu * r) * (((pr2) * ((23.0 * Nu) - 84.0)) - 5.0)) - (Nu * (Nu + 102.0))) + ((r2) * (((((5.0 * Nu) * (pr4)) * ((7.0 * Nu) + 1.0)) - ((27.0 * Nu) * (pr2))) + 16.0))))) + ((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * (((((( -(3.0)) * (Nu2)) - (156.0 * Nu)) + ((r2) * ((((5.0 * (pr4)) * (((9.0 * (Nu2)) + (8.0 * Nu)) + 7.0)) - ((6.0 * (pr2)) * ((6.0 * Nu) + 5.0))) + 24.0))) + ((3.0 * r) * (((( -(4.0)) * Nu) + ((pr2) * (((19.0 * (Nu2)) - (12.0 * Nu)) + 23.0))) - 6.0))) - 27.0)))) * ((((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))) * (((X1 * X2) * ((r2m1 * (2 * 1))))) + ((X1 * X2) * (r2)) * ((((((r3m1 * (3 * 1))) + (((Chi1X1pChi2X2_2) * (1)))))))))/ ((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + ((0.5/np.sqrt(((((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * ((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0)))*((((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0) * ((((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2)))))) * ((((((r2m1 * (2 * 1))) - ((2.0 * (1))))))) + (((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((((((((( -(0.017857142857142856)) * (Chi1_2)) * ((((((-((1210)))) + (((2.0 * X2) * ((((420)))))))) + ((X2 * ((((((370)))))))))))) + (((((0.125 * Chi1) * Chi2) * Nu) * ((((((110)))))))))) + (((0.017857142857142856 * (Chi2_2)) * ((((Nu * ((((20)) - ((870)))))) + ((X2 * ((((1210)))))))))))) + ((Nu * ((((((((((2.0 * ((r2m1 * (2 * 1))))))) + ((22.687902694437597 * (1))))) + ((12.800000000000001 * ((1/((1.0 / r))*(-1.0 * 1)/ (r * r))))))))))))) + ((r5m1 * (5 * 1))))) - ((((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2)))) * ((0.5 * (1)))))))) - ((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) * ((((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))) * ((r4m1 * (4 * 1))) + (r4) * ((((((r3m1 * (3 * 1))) + (((Chi1X1pChi2X2_2) * (1)))))))))/ (((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + (((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * (((((((((((pr2) * (((((r11) * (((((0.75 * (r6)) * ((((Chi1_2) * ((((((Nu2) + ((8.0 * Nu) * X2)) - (4.0 * Nu)) + (4.0 * X2)) + (((4.0 * Nu) - 4.0) * ((Nu + X2) - 1.0))) - 4.0)) - ((((2.0 * Chi1) * Chi2) * Nu) * ((3.0 * Nu) + 4.0))) + ((Chi2_2) * ((5.0 * (Nu2)) - ((12.0 * Nu) * X2))))) - ((0.25 * (r5)) * ((((Chi1_2) * (((((20.0 * (Nu3)) - (368.0 * (Nu2))) + (251.0 * Nu)) + ((1.0 * X2) * (((48.0 * (Nu2)) - (197.0 * Nu)) + 46.0))) + ((2.0 * X2) * (((50.0 * (Nu2)) - (27.0 * Nu)) - 23.0)))) + ((((8.0 * Chi1) * Chi2) * Nu) * (((5.0 * (Nu2)) + (13.0 * Nu)) + 10.0))) + ((Chi2_2) * ((Nu * ((20.0 * (Nu2)) - (220.0 * Nu))) + (X2 * ((( -(148.0)) * (Nu2)) + (251.0 * Nu)))))))) - (((Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626)) + (r5)) * ((((((( -(184.12741616662555)) * (Nu2)) + ((6.0 * Nu) * (r2))) + (((2.0 * Nu) * r) * (26.0 - (3.0 * Nu)))) + ((39.466666666666669 * Nu) * (log1overr))) + (221.57199119214835 * Nu)) + (r4)))) * ((((((-((r2m1 * (2 * 1))))) + ((2.0 * (1))))))) + ((( -((r2))) + (2.0 * r)) - (Chi1X1pChi2X2_2)) * ((((((((((Chi1_2) * ((((((Nu2) + ((8.0 * Nu) * X2)) - (4.0 * Nu)) + (4.0 * X2)) + (((4.0 * Nu) - 4.0) * ((Nu + X2) - 1.0))) - 4.0)) - ((((2.0 * Chi1) * Chi2) * Nu) * ((3.0 * Nu) + 4.0))) + ((Chi2_2) * ((5.0 * (Nu2)) - ((12.0 * Nu) * X2)))) * ((0.75 * ((pow(r,(6-1)) * (6 * 1))))))) - ((((((Chi1_2) * (((((20.0 * (Nu3)) - (368.0 * (Nu2))) + (251.0 * Nu)) + ((1.0 * X2) * (((48.0 * (Nu2)) - (197.0 * Nu)) + 46.0))) + ((2.0 * X2) * (((50.0 * (Nu2)) - (27.0 * Nu)) - 23.0)))) + ((((8.0 * Chi1) * Chi2) * Nu) * (((5.0 * (Nu2)) + (13.0 * Nu)) + 10.0))) + ((Chi2_2) * ((Nu * ((20.0 * (Nu2)) - (220.0 * Nu))) + (X2 * ((( -(148.0)) * (Nu2)) + (251.0 * Nu)))))) * ((0.25 * ((r5m1 * (5 * 1))))) + (0.25 * (r5)) * (((((((Chi1_2) * ((((((((-((360)))) + ((250)))) + (((1.0 * X2) * ((((((40)) - ((190)))))))))))))) + (((((8.0 * Chi1) * Chi2) * Nu) * ((((((10)))))))))) + (((Chi2_2) * ((((X2 * ((((250)))))))))))))))) - ((((((((( -(184.12741616662555)) * (Nu2)) + ((6.0 * Nu) * (r2))) + (((2.0 * Nu) * r) * (26.0 - (3.0 * Nu)))) + ((39.466666666666669 * Nu) * (log1overr))) + (221.57199119214835 * Nu)) + (r4)) * ((((Nu * ((((((((((2.0 * ((r2m1 * (2 * 1))))))) + ((22.687902694437597 * (1))))) + ((12.800000000000001 * ((1/((1.0 / r))*(-1.0 * 1)/ (r * r))))))))))) + ((r5m1 * (5 * 1))))) + ((Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626)) + (r5)) * (((((((((((((6.0 * Nu) * ((r2m1 * (2 * 1))))))) + (((26.0 - (3.0 * Nu)) * (((2.0 * Nu) * (1))))))) + (((39.466666666666669 * Nu) * ((1/((1.0 / r))*(-1.0 * 1)/ (r * r))))))))) + ((r4m1 * (4 * 1)))))))))) - block_sub_2 * (pow(r,(11-1)) * (11 * 1)))/ ((r11) * (r11))))))) + (((r2) * ((Chi1X1pChi2X2_2) * (((L2) * (((((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))) * (-(((1)))) - ( -((r + 2.0))) * (((((r3m1 * (3 * 1))) + (((Chi1X1pChi2X2_2) * (1)))))))/ ((((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))))) - (((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) * (r2m1 * (2 * 1)))/ ((r2) * (r2))))) + ((1.0 * ((((-(L2) * (r2m1 * (2 * 1)))/ ((r2) * (r2))))))))) + (((r3) * (((0.00055555555555555556 * Nu) * (pr4)) * (((((((((((((((5.0 * (Chi1_2)) * ((-((490)))))))) + ((X2 * ((2470)))))) + ((((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0) * ((1120)) + (1125.0 * (Nu2)) * ((((((((10)))))))))))) + (((((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0) * ((220)) + (225.0 * Nu) * (((((((((Chi1_2) * ((((140)))))) + ((Chi2 * ((40)))))) - (((Chi2_2) * ((((140)))))))))))))) + (((((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0) * ((4.0 * (1)))))))))) - (((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) * (r3m1 * (3 * 1)))/ ((r3) * (r3)))))))))))))))))))))))/ (Nu * Nu) # df/(r)

    H2 = (Nu * (M * ((block_sub_1 * (0.5 * ((((2 * Nu) * (((((((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((0.020833333333333332 * L) * (((((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * (((((((3.0 * r) * (((((((pr2) * ((((((10))))))))))))))))))))))))/ ((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + ((0.5/np.sqrt(((((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * ((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0)))*((((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0) * ((((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((((((((( -(0.017857142857142856)) * (Chi1_2)) * ((((((-((1210)))) + (((2.0 * X2) * ((((420)))))))) + ((X2 * ((((((370)))))))))))) + (((((0.125 * Chi1) * Chi2) * Nu) * ((((((110)))))))))) + (((0.017857142857142856 * (Chi2_2)) * ((((Nu * ((((20)) - ((870)))))) + ((X2 * ((((1210))))))))))))))))))))/ (((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + (((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * (((((((((((pr2) * (((((r11) * (((( -((r2))) + (2.0 * r)) - (Chi1X1pChi2X2_2)) * ((((-(((0.25 * (r5)) * (((((((Chi1_2) * ((((((((-((360)))) + ((250)))) + (((1.0 * X2) * ((((((40)) - ((190)))))))))))))) + (((((8.0 * Chi1) * Chi2) * Nu) * ((((((10)))))))))) + (((Chi2_2) * ((((X2 * ((((250))))))))))))))))))))/ ((r11) * (r11))))))))) + ((1.0 * ((0)))))) + (((r3) * (((0.00055555555555555556 * Nu) * (pr4)) * (((((((((((((((5.0 * (Chi1_2)) * ((-((490)))))))) + ((X2 * ((2470)))))) + ((((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0) * ((1120)) + (1125.0 * (Nu2)) * ((((((((10)))))))))))) + (((((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0) * ((220)) + (225.0 * Nu) * (((((((((Chi1_2) * ((((140)))))) + ((Chi2 * ((40)))))) - (((Chi2_2) * ((((140))))))))))))))))))))/ ((r3) * (r3)))))))))))))))))))))))/ (Nu * Nu) # df/(phi)

    H3 = (Nu * (M * ((block_sub_1 * (0.5 * ((((2 * Nu) * (((((((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((0.020833333333333332 * L) * ((((((((6.0 * Nu) * ((Chi1 * (X1_2)) + (Chi2 * (X2_2)))) * (((((((Nu * r) * ((((((23.0 * Nu) - 84.0) * ((pr2m1 * (2 * 1))))))))))) + (((r2) * ((((((((7.0 * Nu) + 1.0) * (((5.0 * Nu) * ((pr4m1 * (4 * 1))))))) - (((27.0 * Nu) * ((pr2m1 * (2 * 1))))))))))))))))) + (((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * (((((((((r2) * (((((((((9.0 * (Nu2)) + (8.0 * Nu)) + 7.0) * ((5.0 * ((pr4m1 * (4 * 1))))))) - ((((6.0 * Nu) + 5.0) * ((6.0 * ((pr2m1 * (2 * 1))))))))))))))) + (((3.0 * r) * (((((((((19.0 * (Nu2)) - (12.0 * Nu)) + 23.0) * ((pr2m1 * (2 * 1))) + (pr2) * ((((((10))))))))))))))))))))))))/ ((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + ((0.5/np.sqrt(((((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * ((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0)))*((((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0) * ((((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((((((((( -(0.017857142857142856)) * (Chi1_2)) * ((((((-((1210)))) + (((2.0 * X2) * ((((420)))))))) + ((X2 * ((((((370)))))))))))) + (((((0.125 * Chi1) * Chi2) * Nu) * ((((((110)))))))))) + (((0.017857142857142856 * (Chi2_2)) * ((((Nu * ((((20)) - ((870)))))) + ((X2 * ((((1210))))))))))))))))))))/ (((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + (((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * (((((((((((pr2) * (((((r11) * (((( -((r2))) + (2.0 * r)) - (Chi1X1pChi2X2_2)) * ((((-(((0.25 * (r5)) * (((((((Chi1_2) * ((((((((-((360)))) + ((250)))) + (((1.0 * X2) * ((((((40)) - ((190)))))))))))))) + (((((8.0 * Chi1) * Chi2) * Nu) * ((((((10)))))))))) + (((Chi2_2) * ((((X2 * ((((250))))))))))))))))))))/ ((r11) * (r11))))) + (( -(1.0)) + (block_sub_2 / (r11))) * ((pr2m1 * (2 * 1))))))) + ((1.0 * ((((pr2m1 * (2 * 1))))))))) + (((r3) * (((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636) * (((0.00055555555555555556 * Nu) * ((pr4m1 * (4 * 1))))) + ((0.00055555555555555556 * Nu) * (pr4)) * (((((((((((((((5.0 * (Chi1_2)) * ((-((490)))))))) + ((X2 * ((2470)))))) + ((((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0) * ((1120)) + (1125.0 * (Nu2)) * ((((((((10)))))))))))) + (((((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0) * ((220)) + (225.0 * Nu) * (((((((((Chi1_2) * ((((140)))))) + ((Chi2 * ((40)))))) - (((Chi2_2) * ((((140)))))))))))))) + (((4.0 * r) * (((((((((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313) * ((pr2m1 * (2 * 1)))))))))))))))))/ ((r3) * (r3)))))))))))))))))))))))/ (Nu * Nu) # df/(pr)

    H4 = (Nu * (M * ((block_sub_1 * (0.5 * ((((2 * Nu) * (((((((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((((((((( -(4.0)) * Chi1) * X1) * X2) * ((((Chi1_2) * ((((( -(6.0)) * (Nu2)) + (6.0 * Nu)) - ((12.0 * X2) * (Nu - 1.0))) + ((3.0 * X2) * ((2.0 * Nu) - 4.0)))) + (((Chi1 * Chi2) * Nu) * (((2.0 * Nu) - (5.0 * X2)) + 5.0))) + (((Chi2_2) * Nu) * ((4.0 * Nu) + (1.0 * X2))))) - ((((4.0 * Chi2) * X1) * X2) * (((((Chi1_2) * Nu) * (((4.0 * Nu) - (1.0 * X2)) + 1.0)) - (((Chi1 * Chi2) * Nu) * ((( -(2.0)) * Nu) - (5.0 * X2)))) - ((Chi2_2) * ((6.0 * (Nu2)) - ((6.0 * Nu) * X2)))))) + (((6.0 * Nu) * ((Chi1 * (X1_2)) + (Chi2 * (X2_2)))) * ((((Nu * r) * (((pr2) * ((23.0 * Nu) - 84.0)) - 5.0)) - (Nu * (Nu + 102.0))) + ((r2) * (((((5.0 * Nu) * (pr4)) * ((7.0 * Nu) + 1.0)) - ((27.0 * Nu) * (pr2))) + 16.0))))) + ((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * (((((( -(3.0)) * (Nu2)) - (156.0 * Nu)) + ((r2) * ((((5.0 * (pr4)) * (((9.0 * (Nu2)) + (8.0 * Nu)) + 7.0)) - ((6.0 * (pr2)) * ((6.0 * Nu) + 5.0))) + 24.0))) + ((3.0 * r) * (((( -(4.0)) * Nu) + ((pr2) * (((19.0 * (Nu2)) - (12.0 * Nu)) + 23.0))) - 6.0))) - 27.0))) * ((0.020833333333333332 * (1))) + (0.020833333333333332 * L) * (((((((3.0 * (X1_2)) * (X2_2)) * (Chi1 + Chi2)) * (((((((3.0 * r) * (((((((pr2) * ((((((10))))))))))))))))))))))))/ ((((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (((X1 * X2) * (r2)) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + ((0.5/np.sqrt(((((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * ((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0)))*((((((((( -(1.0)) + (block_sub_2 / (r11))) * (pr2)) + ((((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * (L2)) * (Chi1X1pChi2X2_2)) / (r2))) + (1.0 * (((L2) / (r2)) + (pr2)))) + ((((0.00055555555555555556 * Nu) * (pr4)) * ((((((((5.0 * (Chi1_2)) * (4950.0 - (4950.0 * X2))) + ((4500.0 * Chi1) * Chi2)) + ((24750.0 * (Chi2_2)) * X2)) + ((1125.0 * (Nu2)) * ((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0))) + ((225.0 * Nu) * (((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0))) + ((4.0 * r) * (((( -(2700.0)) * Nu) + ((pr2) * (((2700.0 * (Nu2)) - (2430.0 * Nu)) - 1252.3534366246313))) + 3600.0))) + 51679.879712920636)) / (r3))) + 1.0) * ((((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((((((((( -(0.017857142857142856)) * (Chi1_2)) * ((((((-((1210)))) + (((2.0 * X2) * ((((420)))))))) + ((X2 * ((((((370)))))))))))) + (((((0.125 * Chi1) * Chi2) * Nu) * ((((((110)))))))))) + (((0.017857142857142856 * (Chi2_2)) * ((((Nu * ((((20)) - ((870)))))) + ((X2 * ((((1210))))))))))))))))))))/ (((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))))) + (((((r2) - (2.0 * r)) + (Chi1X1pChi2X2_2)) * (((((((( -(0.017857142857142856)) * (Chi1_2)) * (((((( -(21.0)) * (Nu3)) + (1190.0 * (Nu2))) - (1218.0 * Nu)) + ((2.0 * X2) * ((421.0 * Nu) - 326.0))) + (X2 * (((( -(315.0)) * (Nu2)) + (376.0 * Nu)) + 652.0)))) + ((((0.125 * Chi1) * Chi2) * Nu) * (((6.0 * (Nu2)) + (113.0 * Nu)) + 68.0))) + ((0.017857142857142856 * (Chi2_2)) * ((Nu * ((21.0 * (Nu2)) - (875.0 * Nu))) + (X2 * ((( -(315.0)) * (Nu2)) + (1218.0 * Nu)))))) + (Nu * (((((( -(24.187902694437597)) * Nu) + (2.0 * (r2))) + (22.687902694437597 * r)) + (12.800000000000001 * (log1overr))) + 68.879194631478626))) + (r5)) - ((0.5 * r) * ((((Chi1_2) * ((((Nu2) - (6.0 * Nu)) + ((4.0 * X2) * (Nu - 2.0))) + ((2.0 * X2) * (Nu + 4.0)))) + (((Chi1 * Chi2) * Nu) * ((2.0 * Nu) - 4.0))) + ((Chi2_2) * ((Nu2) - ((6.0 * Nu) * X2))))))) / ((r4) * (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2))))) * (((((((((((pr2) * (((((r11) * (((( -((r2))) + (2.0 * r)) - (Chi1X1pChi2X2_2)) * ((((-(((0.25 * (r5)) * (((((((Chi1_2) * ((((((((-((360)))) + ((250)))) + (((1.0 * X2) * ((((((40)) - ((190)))))))))))))) + (((((8.0 * Chi1) * Chi2) * Nu) * ((((((10)))))))))) + (((Chi2_2) * ((((X2 * ((((250))))))))))))))))))))/ ((r11) * (r11))))))) + (((r2) * ((Chi1X1pChi2X2_2) * (((( -((r + 2.0))) / (((r3) + (r * (Chi1X1pChi2X2_2))) + (2.0 * (Chi1X1pChi2X2_2)))) * ((pow(L,(2-1)) * (2 * 1)))))) - 0)/ ((r2) * (r2))))) + ((1.0 * (((((r2) * (pow(L,(2-1)) * (2 * 1)))/ ((r2) * (r2))))))))) + (((r3) * (((0.00055555555555555556 * Nu) * (pr4)) * (((((((((((((((5.0 * (Chi1_2)) * ((-((490)))))))) + ((X2 * ((2470)))))) + ((((((11.0 * (Chi1_2)) - ((10.0 * Chi1) * Chi2)) + (11.0 * (Chi2_2))) + 16.0) * ((1120)) + (1125.0 * (Nu2)) * ((((((((10)))))))))))) + (((((((Chi1_2) * ((145.0 * X2) - 250.0)) + ((45.0 * Chi1) * Chi2)) - ((Chi2_2) * ((145.0 * X2) + 105.0))) - 664.0) * ((220)) + (225.0 * Nu) * (((((((((Chi1_2) * ((((140)))))) + ((Chi2 * ((40)))))) - (((Chi2_2) * ((((140))))))))))))))))))))/ ((r3) * (r3)))))))))))))))))))))))/ (Nu * Nu) # df/(L)

    k[0] = H3
    k[1] = H4
    k[2] = -H1 + Fr
    k[3] = -H2 + Fphi